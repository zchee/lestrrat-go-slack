package slack

// Auto-generated by internal/cmd/genmethods/genmethods.go. DO NOT EDIT!

import (
	"context"
	"net/url"
	"strconv"
	"strings"

	"github.com/lestrrat-go/slack/objects"
	"github.com/pkg/errors"
)

var _ = strconv.Itoa
var _ = strings.Index
var _ = objects.EpochTime(0)

// ApiTestCall is created by ApiService.Test method call
type ApiTestCall struct {
	service *ApiService
	error   string
	foo     string
}

// Test creates a ApiTestCall object in preparation for accessing the api.test endpoint
func (s *ApiService) Test() *ApiTestCall {
	var call ApiTestCall
	call.service = s
	return &call
}

// Error sets the value for optional error parameter
func (c *ApiTestCall) Error(error string) *ApiTestCall {
	c.error = error
	return c
}

// Foo sets the value for optional foo parameter
func (c *ApiTestCall) Foo(foo string) *ApiTestCall {
	c.foo = foo
	return c
}

// ValidateArgs checks that all required fields are set in the ApiTestCall object
func (c *ApiTestCall) ValidateArgs() error {
	return nil
}

// Values returns the ApiTestCall object as url.Values
func (c *ApiTestCall) Values() (url.Values, error) {
	if err := c.ValidateArgs(); err != nil {
		return nil, errors.Wrap(err, `failed validation`)
	}
	v := url.Values{}
	v.Set(`token`, c.service.token)

	if len(c.error) > 0 {
		v.Set("error", c.error)
	}

	if len(c.foo) > 0 {
		v.Set("foo", c.foo)
	}
	return v, nil
}

// Do executes the call to access api.test endpoint
func (c *ApiTestCall) Do(ctx context.Context) error {
	const endpoint = "api.test"
	v, err := c.Values()
	if err != nil {
		return err
	}
	var res struct {
		objects.GenericResponse
	}
	if err := c.service.client.postForm(ctx, endpoint, v, &res); err != nil {
		return errors.Wrap(err, `failed to post to api.test`)
	}
	if !res.OK {
		return errors.New(res.Error.String())
	}

	return nil
}

// FromValues parses the data in v and populates `c`
func (c *ApiTestCall) FromValues(v url.Values) error {
	var tmp ApiTestCall
	if raw := strings.TrimSpace(v.Get("error")); len(raw) > 0 {
		tmp.error = raw
	}
	if raw := strings.TrimSpace(v.Get("foo")); len(raw) > 0 {
		tmp.foo = raw
	}
	*c = tmp
	return nil
}
